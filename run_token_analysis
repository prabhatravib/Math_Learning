#!/usr/bin/env python3
"""
Run Token Analysis with Visualization

This script analyzes multiple PDF files for token types and creates a comparison chart.
"""

import os
import argparse
import logging
from typing import List, Dict, Any
from datetime import datetime

# Import our analysis functions
from Analysis_updated import main as analyze_pdfs
from token_visualization import create_token_comparison_chart, load_results_from_json

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

def parse_arguments():
    """Parse command line arguments"""
    parser = argparse.ArgumentParser(description='Analyze PDF files for token types and create visualization')
    
    parser.add_argument('--pdfs', nargs='+', help='List of PDF files to analyze')
    parser.add_argument('--fraction', type=float, default=1.0, 
                       help='Fraction of each PDF to analyze (0.0-1.0, default: 1.0)')
    parser.add_argument('--output-chart', type=str, default='token_comparison_chart.png',
                       help='Output filename for chart (default: token_comparison_chart.png)')
    parser.add_argument('--output-json', type=str, default='token_analysis_results.json',
                       help='Output filename for JSON results (default: token_analysis_results.json)')
    parser.add_argument('--load-existing', action='store_true',
                       help='Load existing JSON results instead of analyzing PDFs')
    parser.add_argument('--no-chart', action='store_true',
                       help='Skip creating the chart')
    parser.add_argument('--list-example-pdfs', action='store_true',
                       help='List example PDF paths that can be used')
    
    return parser.parse_args()

def list_example_pdfs():
    """List example PDF paths"""
    example_pdfs = [
        "C:/Users/prabh/Downloads/A Few Useful Things to Know About Machine Learning.pdf",
        "C:/Users/prabh/Downloads/Bishop-Pattern-Recognition-and-Machine-Learning-2006.pdf",
        "C:/Users/prabh/Downloads/Writing_a_Position_Paper.pdf",
        "C:/Users/prabh/Downloads/neurips_2025.pdf"
    ]
    
    print("\nExample PDF files you can analyze:")
    print("-" * 50)
    for i, pdf in enumerate(example_pdfs, 1):
        exists = "✓" if os.path.exists(pdf) else "✗"
        print(f"{i}. {pdf} [{exists}]")
    print("-" * 50)
    print("Note: ✓ means file exists, ✗ means file not found")

def main():
    """Main function to run the token analysis and visualization"""
    args = parse_arguments()
    
    # Handle listing example PDFs
    if args.list_example_pdfs:
        list_example_pdfs()
        return
    
    # Determine timestamp for output files
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    
    # Update output filenames with timestamp
    if not args.load_existing:
        output_json = args.output_json.replace('.json', f'_{timestamp}.json')
    else:
        output_json = args.output_json
    
    output_chart = args.output_chart.replace('.png', f'_{timestamp}.png')
    
    try:
        if args.load_existing:
            logger.info(f"Loading existing results from {output_json}")
            results = load_results_from_json(output_json)
            logger.info(f"Loaded results for {len(results)} documents")
        else:
            # Use provided PDFs or default ones
            if args.pdfs:
                pdf_files = args.pdfs
            else:
                # Default PDFs
                pdf_files = [
                    "C:/Users/prabh/Downloads/A Few Useful Things to Know About Machine Learning.pdf",
                    "C:/Users/prabh/Downloads/Bishop-Pattern-Recognition-and-Machine-Learning-2006.pdf"
                ]
                logger.info("No PDFs specified, using default files")
            
            # Verify files exist
            verified_files = []
            for pdf in pdf_files:
                if os.path.exists(pdf):
                    verified_files.append(pdf)
                    logger.info(f"Found: {pdf}")
                else:
                    logger.warning(f"File not found: {pdf}")
            
            if not verified_files:
                logger.error("No valid PDF files found. Please specify existing files.")
                list_example_pdfs()
                return
            
            # Run analysis
            logger.info(f"Starting analysis of {len(verified_files)} PDF(s)...")
            results = analyze_pdfs(verified_files, args.fraction, create_chart=False)
            
            # Save results with timestamp
            from token_visualization import save_results_to_json
            save_results_to_json(results, output_json)
        
        # Create visualization if requested
        if not args.no_chart:
            logger.info(f"Creating visualization...")
            create_token_comparison_chart(results, output_chart)
            logger.info(f"Chart saved as: {output_chart}")
        
        # Print summary
        print("\n" + "="*60)
        print("TOKEN ANALYSIS SUMMARY")
        print("="*60)
        
        for filename, data in results.items():
            if "error" not in data:
                total = data.get('total_tokens', 0)
                math_count = len(data.get('mathematical', []))
                machine_count = len(data.get('machine_related', []))
                
                math_pct = (math_count / total * 100) if total > 0 else 0
                machine_pct = (machine_count / total * 100) if total > 0 else 0
                
                print(f"\n{os.path.basename(filename)}:")
                print(f"  Total tokens: {total:,}")
                print(f"  Mathematical: {math_count:,} ({math_pct:.1f}%)")
                print(f"  Machine-related: {machine_count:,} ({machine_pct:.1f}%)")
            else:
                print(f"\n{os.path.basename(filename)}: ERROR - {data.get('error', 'Unknown error')}")
        
        print("\n" + "="*60)
        print(f"Results saved to: {output_json}")
        if not args.no_chart:
            print(f"Chart saved to: {output_chart}")
        print("="*60)
        
    except Exception as e:
        logger.error(f"Error during execution: {str(e)}")
        raise

if __name__ == "__main__":
    main()
